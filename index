#!/usr/bin/env python3

import argparse
import json
import os
import subprocess
import pymonetdb

subprocess.run('monetdbd create /work/mydbfarm'.split())                        
subprocess.run('monetdbd start /work/mydbfarm'.split())                         

parser = argparse.ArgumentParser()
parser.add_argument("--json", type=json.loads, required=True, help="the args")

# Parse the args
args, unknown = parser.parse_known_args()

# Iterate over collections
for collection in args.json["collections"]:
    
    # TODO: do we really want collection specific databases?
    subprocess.run('monetdb create {}'.format(collection["name"]).split())
    subprocess.run('monetdb release {}'.format(collection["name"]).split())

    # Updated manually for WAPO
    # Command need to be adapted based on a collection chosen to index
    subprocess.run("""
        java -cp anserini.jar io.anserini.index.IndexCollection
            -collection WashingtonPostCollection -generator WapoGenerator
            -threads 1 -index {0}
            -input {1}
            -storePositions -storeDocvectors -storeRawDocs
    """.format(collection["name"], collection["path"]).split())

    subprocess.run("""
        /work/olddog/target/appassembler/bin/nl.ru.convert.Convert
        -index /work/{0}
        -docs docs
        -dict dict
        -terms terms
    """.format(collection["name"]).split())

    subprocess.run('mv dict /tmp/dict'.split())
    subprocess.run('mv terms /tmp/terms'.split())
    subprocess.run('mv docs /tmp/docs'.split())

subprocess.run('rm -rf /work/{0}'.split())

print("CREATE DATABASE")
dbname = collection["name"]

print("CREATE CONNECTION")
connection = pymonetdb.connect(username='monetdb',
                               password='monetdb',
                               hostname='localhost',
                               database=dbname)
cursor = connection.cursor()

print("CREATE TABLES")
cursor.execute("CREATE TABLE docs (collection_id STRING, id INT, len INT)")
cursor.execute("CREATE TABLE dict (termid INT, term STRING, df INT)")
cursor.execute("CREATE TABLE terms (termid INT, docid INT, count INT)")

print("LOAD DATA")
cursor.execute("COPY INTO docs FROM '/tmp/docs'") 
cursor.execute("COPY INTO dict FROM '/tmp/dict'")
cursor.execute("COPY INTO terms FROM '/tmp/terms'")

print("DATA LOADED")
connection.commit()
connection.close()
